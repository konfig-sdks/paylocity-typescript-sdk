/* tslint:disable */
/* eslint-disable */
/*
WebLink API

For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

The version of the OpenAPI document: v2
Contact: webservices@paylocity.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Earning } from '../models';
// @ts-ignore
import { ModelError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EarningsApi - axios parameter creator
 * @export
 */
export const EarningsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add/Update Earning API sends new or updated employee earnings information directly to Paylocity Payroll/HR solution.
         * @summary Add/Update Earning
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {Earning} json Earning Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateEarning: async (companyId: string, employeeId: string, json: Earning, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('addOrUpdateEarning', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('addOrUpdateEarning', 'employeeId', employeeId)
            // verify required parameter 'json' is not null or undefined
            assertParamExists('addOrUpdateEarning', 'json', json)
            const localVarPath = `/v2/companies/{companyId}/employees/{employeeId}/earnings`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: json,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/employees/{employeeId}/earnings',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(json, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Earning by Earning Code and Start Date
         * @summary Delete Earning by Earning Code and Start Date
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {string} earningCode Earning Code
         * @param {string} startDate Start Date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByCodeAndStart: async (companyId: string, employeeId: string, earningCode: string, startDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteByCodeAndStart', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deleteByCodeAndStart', 'employeeId', employeeId)
            // verify required parameter 'earningCode' is not null or undefined
            assertParamExists('deleteByCodeAndStart', 'earningCode', earningCode)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('deleteByCodeAndStart', 'startDate', startDate)
            const localVarPath = `/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}/{startDate}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"earningCode"}}`, encodeURIComponent(String(earningCode !== undefined ? earningCode : `-earningCode-`)))
                .replace(`{${"startDate"}}`, encodeURIComponent(String(startDate !== undefined ? startDate : `-startDate-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}/{startDate}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Earnings returns all earnings for the selected employee.
         * @summary Get All Earnings
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (companyId: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAll', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getAll', 'employeeId', employeeId)
            const localVarPath = `/v2/companies/{companyId}/employees/{employeeId}/earnings`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/employees/{employeeId}/earnings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Earnings returns the single earning with the provided earning code and start date for the selected employee.
         * @summary Get Earning by Earning Code and Start Date
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {string} earningCode Earning Code
         * @param {string} startDate Start Date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCodeAndStart: async (companyId: string, employeeId: string, earningCode: string, startDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getByCodeAndStart', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getByCodeAndStart', 'employeeId', employeeId)
            // verify required parameter 'earningCode' is not null or undefined
            assertParamExists('getByCodeAndStart', 'earningCode', earningCode)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getByCodeAndStart', 'startDate', startDate)
            const localVarPath = `/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}/{startDate}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"earningCode"}}`, encodeURIComponent(String(earningCode !== undefined ? earningCode : `-earningCode-`)))
                .replace(`{${"startDate"}}`, encodeURIComponent(String(startDate !== undefined ? startDate : `-startDate-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}/{startDate}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Earnings returns all earnings with the provided earning code for the selected employee.
         * @summary Get Earnings by Earning Code
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {string} earningCode Earning Code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEarningCode: async (companyId: string, employeeId: string, earningCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getByEarningCode', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getByEarningCode', 'employeeId', employeeId)
            // verify required parameter 'earningCode' is not null or undefined
            assertParamExists('getByEarningCode', 'earningCode', earningCode)
            const localVarPath = `/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"earningCode"}}`, encodeURIComponent(String(earningCode !== undefined ? earningCode : `-earningCode-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EarningsApi - functional programming interface
 * @export
 */
export const EarningsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EarningsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add/Update Earning API sends new or updated employee earnings information directly to Paylocity Payroll/HR solution.
         * @summary Add/Update Earning
         * @param {EarningsApiAddOrUpdateEarningRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrUpdateEarning(requestParameters: EarningsApiAddOrUpdateEarningRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const json: Earning = {
                agency: requestParameters.agency,
                amount: requestParameters.amount,
                annualMaximum: requestParameters.annualMaximum,
                calculationCode: requestParameters.calculationCode,
                costCenter1: requestParameters.costCenter1,
                costCenter2: requestParameters.costCenter2,
                costCenter3: requestParameters.costCenter3,
                earningCode: requestParameters.earningCode,
                effectiveDate: requestParameters.effectiveDate,
                endDate: requestParameters.endDate,
                frequency: requestParameters.frequency,
                goal: requestParameters.goal,
                hoursOrUnits: requestParameters.hoursOrUnits,
                isSelfInsured: requestParameters.isSelfInsured,
                jobCode: requestParameters.jobCode,
                miscellaneousInfo: requestParameters.miscellaneousInfo,
                paidTowardsGoal: requestParameters.paidTowardsGoal,
                payPeriodMaximum: requestParameters.payPeriodMaximum,
                payPeriodMinimum: requestParameters.payPeriodMinimum,
                rate: requestParameters.rate,
                rateCode: requestParameters.rateCode,
                startDate: requestParameters.startDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrUpdateEarning(requestParameters.companyId, requestParameters.employeeId, json, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Earning by Earning Code and Start Date
         * @summary Delete Earning by Earning Code and Start Date
         * @param {EarningsApiDeleteByCodeAndStartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByCodeAndStart(requestParameters: EarningsApiDeleteByCodeAndStartRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByCodeAndStart(requestParameters.companyId, requestParameters.employeeId, requestParameters.earningCode, requestParameters.startDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get All Earnings returns all earnings for the selected employee.
         * @summary Get All Earnings
         * @param {EarningsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: EarningsApiGetAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Earning>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.companyId, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Earnings returns the single earning with the provided earning code and start date for the selected employee.
         * @summary Get Earning by Earning Code and Start Date
         * @param {EarningsApiGetByCodeAndStartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByCodeAndStart(requestParameters: EarningsApiGetByCodeAndStartRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Earning>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByCodeAndStart(requestParameters.companyId, requestParameters.employeeId, requestParameters.earningCode, requestParameters.startDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Earnings returns all earnings with the provided earning code for the selected employee.
         * @summary Get Earnings by Earning Code
         * @param {EarningsApiGetByEarningCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByEarningCode(requestParameters: EarningsApiGetByEarningCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Earning>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByEarningCode(requestParameters.companyId, requestParameters.employeeId, requestParameters.earningCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EarningsApi - factory interface
 * @export
 */
export const EarningsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EarningsApiFp(configuration)
    return {
        /**
         * Add/Update Earning API sends new or updated employee earnings information directly to Paylocity Payroll/HR solution.
         * @summary Add/Update Earning
         * @param {EarningsApiAddOrUpdateEarningRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateEarning(requestParameters: EarningsApiAddOrUpdateEarningRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addOrUpdateEarning(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Earning by Earning Code and Start Date
         * @summary Delete Earning by Earning Code and Start Date
         * @param {EarningsApiDeleteByCodeAndStartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByCodeAndStart(requestParameters: EarningsApiDeleteByCodeAndStartRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteByCodeAndStart(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Earnings returns all earnings for the selected employee.
         * @summary Get All Earnings
         * @param {EarningsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: EarningsApiGetAllRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Earning>> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Earnings returns the single earning with the provided earning code and start date for the selected employee.
         * @summary Get Earning by Earning Code and Start Date
         * @param {EarningsApiGetByCodeAndStartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCodeAndStart(requestParameters: EarningsApiGetByCodeAndStartRequest, options?: AxiosRequestConfig): AxiosPromise<Earning> {
            return localVarFp.getByCodeAndStart(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Earnings returns all earnings with the provided earning code for the selected employee.
         * @summary Get Earnings by Earning Code
         * @param {EarningsApiGetByEarningCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEarningCode(requestParameters: EarningsApiGetByEarningCodeRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Earning>> {
            return localVarFp.getByEarningCode(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addOrUpdateEarning operation in EarningsApi.
 * @export
 * @interface EarningsApiAddOrUpdateEarningRequest
 */
export type EarningsApiAddOrUpdateEarningRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof EarningsApiAddOrUpdateEarning
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof EarningsApiAddOrUpdateEarning
    */
    readonly employeeId: string
    
} & Earning

/**
 * Request parameters for deleteByCodeAndStart operation in EarningsApi.
 * @export
 * @interface EarningsApiDeleteByCodeAndStartRequest
 */
export type EarningsApiDeleteByCodeAndStartRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof EarningsApiDeleteByCodeAndStart
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof EarningsApiDeleteByCodeAndStart
    */
    readonly employeeId: string
    
    /**
    * Earning Code
    * @type {string}
    * @memberof EarningsApiDeleteByCodeAndStart
    */
    readonly earningCode: string
    
    /**
    * Start Date
    * @type {string}
    * @memberof EarningsApiDeleteByCodeAndStart
    */
    readonly startDate: string
    
}

/**
 * Request parameters for getAll operation in EarningsApi.
 * @export
 * @interface EarningsApiGetAllRequest
 */
export type EarningsApiGetAllRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof EarningsApiGetAll
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof EarningsApiGetAll
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for getByCodeAndStart operation in EarningsApi.
 * @export
 * @interface EarningsApiGetByCodeAndStartRequest
 */
export type EarningsApiGetByCodeAndStartRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof EarningsApiGetByCodeAndStart
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof EarningsApiGetByCodeAndStart
    */
    readonly employeeId: string
    
    /**
    * Earning Code
    * @type {string}
    * @memberof EarningsApiGetByCodeAndStart
    */
    readonly earningCode: string
    
    /**
    * Start Date
    * @type {string}
    * @memberof EarningsApiGetByCodeAndStart
    */
    readonly startDate: string
    
}

/**
 * Request parameters for getByEarningCode operation in EarningsApi.
 * @export
 * @interface EarningsApiGetByEarningCodeRequest
 */
export type EarningsApiGetByEarningCodeRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof EarningsApiGetByEarningCode
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof EarningsApiGetByEarningCode
    */
    readonly employeeId: string
    
    /**
    * Earning Code
    * @type {string}
    * @memberof EarningsApiGetByEarningCode
    */
    readonly earningCode: string
    
}

/**
 * EarningsApiGenerated - object-oriented interface
 * @export
 * @class EarningsApiGenerated
 * @extends {BaseAPI}
 */
export class EarningsApiGenerated extends BaseAPI {
    /**
     * Add/Update Earning API sends new or updated employee earnings information directly to Paylocity Payroll/HR solution.
     * @summary Add/Update Earning
     * @param {EarningsApiAddOrUpdateEarningRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningsApiGenerated
     */
    public addOrUpdateEarning(requestParameters: EarningsApiAddOrUpdateEarningRequest, options?: AxiosRequestConfig) {
        return EarningsApiFp(this.configuration).addOrUpdateEarning(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Earning by Earning Code and Start Date
     * @summary Delete Earning by Earning Code and Start Date
     * @param {EarningsApiDeleteByCodeAndStartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningsApiGenerated
     */
    public deleteByCodeAndStart(requestParameters: EarningsApiDeleteByCodeAndStartRequest, options?: AxiosRequestConfig) {
        return EarningsApiFp(this.configuration).deleteByCodeAndStart(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Earnings returns all earnings for the selected employee.
     * @summary Get All Earnings
     * @param {EarningsApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningsApiGenerated
     */
    public getAll(requestParameters: EarningsApiGetAllRequest, options?: AxiosRequestConfig) {
        return EarningsApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Earnings returns the single earning with the provided earning code and start date for the selected employee.
     * @summary Get Earning by Earning Code and Start Date
     * @param {EarningsApiGetByCodeAndStartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningsApiGenerated
     */
    public getByCodeAndStart(requestParameters: EarningsApiGetByCodeAndStartRequest, options?: AxiosRequestConfig) {
        return EarningsApiFp(this.configuration).getByCodeAndStart(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Earnings returns all earnings with the provided earning code for the selected employee.
     * @summary Get Earnings by Earning Code
     * @param {EarningsApiGetByEarningCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningsApiGenerated
     */
    public getByEarningCode(requestParameters: EarningsApiGetByEarningCodeRequest, options?: AxiosRequestConfig) {
        return EarningsApiFp(this.configuration).getByEarningCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
