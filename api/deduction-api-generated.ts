/* tslint:disable */
/* eslint-disable */
/*
WebLink API

For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

The version of the OpenAPI document: v2
Contact: webservices@paylocity.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddUpdateDeduction } from '../models';
// @ts-ignore
import { Deduction } from '../models';
// @ts-ignore
import { DeductionAddOrUpdateDeductionRequest } from '../models';
// @ts-ignore
import { ErrorsInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DeductionApi - axios parameter creator
 * @export
 */
export const DeductionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add/Update Deduction API sends new or updated employee deduction information directly to Paylocity Payroll/HR solution.
         * @summary Add / Update Deduction
         * @param {DeductionAddOrUpdateDeductionRequest} body Deduction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateDeduction: async (body: DeductionAddOrUpdateDeductionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('addOrUpdateDeduction', 'body', body)
            const localVarPath = `/v1/deduction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/deduction',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Deductions returns all deductions for the selected employee.
         * @summary Get All Deductions
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDeductions: async (companyId: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAllDeductions', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getAllDeductions', 'employeeId', employeeId)
            const localVarPath = `/v1/companies/{companyId}/employees/{employeeId}/deductions`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{companyId}/employees/{employeeId}/deductions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Deduction for Deduction Code returns records for a specific deduction for the selected employee.
         * @summary Get Deduction for Deduction Code
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {string} deductionCode Deduction Code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCode: async (companyId: string, employeeId: string, deductionCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getByCode', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getByCode', 'employeeId', employeeId)
            // verify required parameter 'deductionCode' is not null or undefined
            assertParamExists('getByCode', 'deductionCode', deductionCode)
            const localVarPath = `/v1/companies/{companyId}/employees/{employeeId}/deductions/{deductionCode}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"deductionCode"}}`, encodeURIComponent(String(deductionCode !== undefined ? deductionCode : `-deductionCode-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{companyId}/employees/{employeeId}/deductions/{deductionCode}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Deduction API deletes an incorrect deduction from Paylocity Payroll/HR solution.
         * @summary Delete deduction for deduction code / start date
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {string} deductionCode Deduction Code
         * @param {string} startDate Start Date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDeductionByCodeAndStartDate: async (companyId: string, employeeId: string, deductionCode: string, startDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('removeDeductionByCodeAndStartDate', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('removeDeductionByCodeAndStartDate', 'employeeId', employeeId)
            // verify required parameter 'deductionCode' is not null or undefined
            assertParamExists('removeDeductionByCodeAndStartDate', 'deductionCode', deductionCode)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('removeDeductionByCodeAndStartDate', 'startDate', startDate)
            const localVarPath = `/v1/companies/{companyId}/employees/{employeeId}/deductions/{deductionCode}/{startDate}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"deductionCode"}}`, encodeURIComponent(String(deductionCode !== undefined ? deductionCode : `-deductionCode-`)))
                .replace(`{${"startDate"}}`, encodeURIComponent(String(startDate !== undefined ? startDate : `-startDate-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{companyId}/employees/{employeeId}/deductions/{deductionCode}/{startDate}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeductionApi - functional programming interface
 * @export
 */
export const DeductionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeductionApiAxiosParamCreator(configuration)
    return {
        /**
         * Add/Update Deduction API sends new or updated employee deduction information directly to Paylocity Payroll/HR solution.
         * @summary Add / Update Deduction
         * @param {DeductionApiAddOrUpdateDeductionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrUpdateDeduction(requestParameters: DeductionApiAddOrUpdateDeductionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: DeductionAddOrUpdateDeductionRequest = {
                deduction: requestParameters.deduction
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrUpdateDeduction(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get All Deductions returns all deductions for the selected employee.
         * @summary Get All Deductions
         * @param {DeductionApiGetAllDeductionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDeductions(requestParameters: DeductionApiGetAllDeductionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Deduction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDeductions(requestParameters.companyId, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Deduction for Deduction Code returns records for a specific deduction for the selected employee.
         * @summary Get Deduction for Deduction Code
         * @param {DeductionApiGetByCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByCode(requestParameters: DeductionApiGetByCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Deduction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByCode(requestParameters.companyId, requestParameters.employeeId, requestParameters.deductionCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Deduction API deletes an incorrect deduction from Paylocity Payroll/HR solution.
         * @summary Delete deduction for deduction code / start date
         * @param {DeductionApiRemoveDeductionByCodeAndStartDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeDeductionByCodeAndStartDate(requestParameters: DeductionApiRemoveDeductionByCodeAndStartDateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeDeductionByCodeAndStartDate(requestParameters.companyId, requestParameters.employeeId, requestParameters.deductionCode, requestParameters.startDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeductionApi - factory interface
 * @export
 */
export const DeductionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeductionApiFp(configuration)
    return {
        /**
         * Add/Update Deduction API sends new or updated employee deduction information directly to Paylocity Payroll/HR solution.
         * @summary Add / Update Deduction
         * @param {DeductionApiAddOrUpdateDeductionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateDeduction(requestParameters: DeductionApiAddOrUpdateDeductionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addOrUpdateDeduction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Deductions returns all deductions for the selected employee.
         * @summary Get All Deductions
         * @param {DeductionApiGetAllDeductionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDeductions(requestParameters: DeductionApiGetAllDeductionsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Deduction>> {
            return localVarFp.getAllDeductions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Deduction for Deduction Code returns records for a specific deduction for the selected employee.
         * @summary Get Deduction for Deduction Code
         * @param {DeductionApiGetByCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCode(requestParameters: DeductionApiGetByCodeRequest, options?: AxiosRequestConfig): AxiosPromise<Deduction> {
            return localVarFp.getByCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Deduction API deletes an incorrect deduction from Paylocity Payroll/HR solution.
         * @summary Delete deduction for deduction code / start date
         * @param {DeductionApiRemoveDeductionByCodeAndStartDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDeductionByCodeAndStartDate(requestParameters: DeductionApiRemoveDeductionByCodeAndStartDateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeDeductionByCodeAndStartDate(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addOrUpdateDeduction operation in DeductionApi.
 * @export
 * @interface DeductionApiAddOrUpdateDeductionRequest
 */
export type DeductionApiAddOrUpdateDeductionRequest = {
    
} & DeductionAddOrUpdateDeductionRequest

/**
 * Request parameters for getAllDeductions operation in DeductionApi.
 * @export
 * @interface DeductionApiGetAllDeductionsRequest
 */
export type DeductionApiGetAllDeductionsRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof DeductionApiGetAllDeductions
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof DeductionApiGetAllDeductions
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for getByCode operation in DeductionApi.
 * @export
 * @interface DeductionApiGetByCodeRequest
 */
export type DeductionApiGetByCodeRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof DeductionApiGetByCode
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof DeductionApiGetByCode
    */
    readonly employeeId: string
    
    /**
    * Deduction Code
    * @type {string}
    * @memberof DeductionApiGetByCode
    */
    readonly deductionCode: string
    
}

/**
 * Request parameters for removeDeductionByCodeAndStartDate operation in DeductionApi.
 * @export
 * @interface DeductionApiRemoveDeductionByCodeAndStartDateRequest
 */
export type DeductionApiRemoveDeductionByCodeAndStartDateRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof DeductionApiRemoveDeductionByCodeAndStartDate
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof DeductionApiRemoveDeductionByCodeAndStartDate
    */
    readonly employeeId: string
    
    /**
    * Deduction Code
    * @type {string}
    * @memberof DeductionApiRemoveDeductionByCodeAndStartDate
    */
    readonly deductionCode: string
    
    /**
    * Start Date
    * @type {string}
    * @memberof DeductionApiRemoveDeductionByCodeAndStartDate
    */
    readonly startDate: string
    
}

/**
 * DeductionApiGenerated - object-oriented interface
 * @export
 * @class DeductionApiGenerated
 * @extends {BaseAPI}
 */
export class DeductionApiGenerated extends BaseAPI {
    /**
     * Add/Update Deduction API sends new or updated employee deduction information directly to Paylocity Payroll/HR solution.
     * @summary Add / Update Deduction
     * @param {DeductionApiAddOrUpdateDeductionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeductionApiGenerated
     */
    public addOrUpdateDeduction(requestParameters: DeductionApiAddOrUpdateDeductionRequest, options?: AxiosRequestConfig) {
        return DeductionApiFp(this.configuration).addOrUpdateDeduction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Deductions returns all deductions for the selected employee.
     * @summary Get All Deductions
     * @param {DeductionApiGetAllDeductionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeductionApiGenerated
     */
    public getAllDeductions(requestParameters: DeductionApiGetAllDeductionsRequest, options?: AxiosRequestConfig) {
        return DeductionApiFp(this.configuration).getAllDeductions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Deduction for Deduction Code returns records for a specific deduction for the selected employee.
     * @summary Get Deduction for Deduction Code
     * @param {DeductionApiGetByCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeductionApiGenerated
     */
    public getByCode(requestParameters: DeductionApiGetByCodeRequest, options?: AxiosRequestConfig) {
        return DeductionApiFp(this.configuration).getByCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Deduction API deletes an incorrect deduction from Paylocity Payroll/HR solution.
     * @summary Delete deduction for deduction code / start date
     * @param {DeductionApiRemoveDeductionByCodeAndStartDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeductionApiGenerated
     */
    public removeDeductionByCodeAndStartDate(requestParameters: DeductionApiRemoveDeductionByCodeAndStartDateRequest, options?: AxiosRequestConfig) {
        return DeductionApiFp(this.configuration).removeDeductionByCodeAndStartDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
