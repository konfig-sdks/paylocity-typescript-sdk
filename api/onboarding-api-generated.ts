/* tslint:disable */
/* eslint-disable */
/*
WebLink API

For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

The version of the OpenAPI document: v2
Contact: webservices@paylocity.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorsInner } from '../models';
// @ts-ignore
import { Onboarding } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OnboardingApi - axios parameter creator
 * @export
 */
export const OnboardingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Onboarding API sends employee data into Paylocity Onboarding to help ensure an easy and accurate hiring process for subsequent completion into Paylocity Payroll/HR solution.
         * @summary Add Employee to Onboarding
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {Onboarding} body onboarding Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeeToOnboarding: async (companyId: string, body: Onboarding, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('addEmployeeToOnboarding', 'companyId', companyId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('addEmployeeToOnboarding', 'body', body)
            const localVarPath = `/v1/companies/{companyId}/onboarding/employees`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{companyId}/onboarding/employees',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnboardingApi - functional programming interface
 * @export
 */
export const OnboardingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnboardingApiAxiosParamCreator(configuration)
    return {
        /**
         * Onboarding API sends employee data into Paylocity Onboarding to help ensure an easy and accurate hiring process for subsequent completion into Paylocity Payroll/HR solution.
         * @summary Add Employee to Onboarding
         * @param {OnboardingApiAddEmployeeToOnboardingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEmployeeToOnboarding(requestParameters: OnboardingApiAddEmployeeToOnboardingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: Onboarding = {
                employeeId: requestParameters.employeeId,
                address1: requestParameters.address1,
                address2: requestParameters.address2,
                autoPayType: requestParameters.autoPayType,
                baseRate: requestParameters.baseRate,
                city: requestParameters.city,
                costCenter1: requestParameters.costCenter1,
                costCenter2: requestParameters.costCenter2,
                costCenter3: requestParameters.costCenter3,
                defaultHours: requestParameters.defaultHours,
                employeeStatus: requestParameters.employeeStatus,
                employmentType: requestParameters.employmentType,
                federalFilingStatus: requestParameters.federalFilingStatus,
                firstName: requestParameters.firstName,
                sex: requestParameters.sex,
                hireDate: requestParameters.hireDate,
                homePhone: requestParameters.homePhone,
                lastName: requestParameters.lastName,
                maritalStatus: requestParameters.maritalStatus,
                personalMobilePhone: requestParameters.personalMobilePhone,
                payFrequency: requestParameters.payFrequency,
                personalEmailAddress: requestParameters.personalEmailAddress,
                payType: requestParameters.payType,
                ratePer: requestParameters.ratePer,
                salary: requestParameters.salary,
                state: requestParameters.state,
                ssn: requestParameters.ssn,
                stateFilingStatus: requestParameters.stateFilingStatus,
                suiState: requestParameters.suiState,
                taxForm: requestParameters.taxForm,
                taxState: requestParameters.taxState,
                userName: requestParameters.userName,
                workEmailAddress: requestParameters.workEmailAddress,
                zip: requestParameters.zip
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEmployeeToOnboarding(requestParameters.companyId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnboardingApi - factory interface
 * @export
 */
export const OnboardingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnboardingApiFp(configuration)
    return {
        /**
         * Onboarding API sends employee data into Paylocity Onboarding to help ensure an easy and accurate hiring process for subsequent completion into Paylocity Payroll/HR solution.
         * @summary Add Employee to Onboarding
         * @param {OnboardingApiAddEmployeeToOnboardingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeeToOnboarding(requestParameters: OnboardingApiAddEmployeeToOnboardingRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addEmployeeToOnboarding(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addEmployeeToOnboarding operation in OnboardingApi.
 * @export
 * @interface OnboardingApiAddEmployeeToOnboardingRequest
 */
export type OnboardingApiAddEmployeeToOnboardingRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof OnboardingApiAddEmployeeToOnboarding
    */
    readonly companyId: string
    
} & Onboarding

/**
 * OnboardingApiGenerated - object-oriented interface
 * @export
 * @class OnboardingApiGenerated
 * @extends {BaseAPI}
 */
export class OnboardingApiGenerated extends BaseAPI {
    /**
     * Onboarding API sends employee data into Paylocity Onboarding to help ensure an easy and accurate hiring process for subsequent completion into Paylocity Payroll/HR solution.
     * @summary Add Employee to Onboarding
     * @param {OnboardingApiAddEmployeeToOnboardingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApiGenerated
     */
    public addEmployeeToOnboarding(requestParameters: OnboardingApiAddEmployeeToOnboardingRequest, options?: AxiosRequestConfig) {
        return OnboardingApiFp(this.configuration).addEmployeeToOnboarding(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
