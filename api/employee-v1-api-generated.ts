/* tslint:disable */
/* eslint-disable */
/*
WebLink API

For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

The version of the OpenAPI document: v2
Contact: webservices@paylocity.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeV1 } from '../models';
// @ts-ignore
import { EmployeeV1CreateNewEmployeeRecordRequest } from '../models';
// @ts-ignore
import { EmployeeV1UpdateEmployeeDataToPaylocityRequest } from '../models';
// @ts-ignore
import { ErrorsInner } from '../models';
// @ts-ignore
import { NewEmployee } from '../models';
// @ts-ignore
import { UpdateEmployee } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeV1Api - axios parameter creator
 * @export
 */
export const EmployeeV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This resource allows for the creation of a new employee record for a specified companyID.  Additional field objects may need to be added for companies that use the New Hire Template in the Paylocity HCM solution when hiring employees and have additional required fields.   > ðŸš§ Maintenance Mode >  > _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
         * @summary Add new employee
         * @param {EmployeeV1CreateNewEmployeeRecordRequest} body New Employee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEmployeeRecord: async (body: EmployeeV1CreateNewEmployeeRecordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createNewEmployeeRecord', 'body', body)
            const localVarPath = `/v1/employee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employee',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Employee API will return employee data currently available in Paylocity Payroll/HR solution.   > ðŸš§ Maintenance Mode >  > _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
         * @summary Get Employee
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeData: async (companyId: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployeeData', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeData', 'employeeId', employeeId)
            const localVarPath = `/v1/company/{companyId}/employee/{employeeId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/company/{companyId}/employee/{employeeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Employee API sends updates to employee data to Paylocity Payroll/HR solution.   > ðŸš§ Maintenance Mode >  > _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
         * @summary Update employee
         * @param {EmployeeV1UpdateEmployeeDataToPaylocityRequest} body UpdateEmployee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeDataToPaylocity: async (body: EmployeeV1UpdateEmployeeDataToPaylocityRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateEmployeeDataToPaylocity', 'body', body)
            const localVarPath = `/v1/update-employee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/update-employee',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeV1Api - functional programming interface
 * @export
 */
export const EmployeeV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * This resource allows for the creation of a new employee record for a specified companyID.  Additional field objects may need to be added for companies that use the New Hire Template in the Paylocity HCM solution when hiring employees and have additional required fields.   > ðŸš§ Maintenance Mode >  > _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
         * @summary Add new employee
         * @param {EmployeeV1ApiCreateNewEmployeeRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewEmployeeRecord(requestParameters: EmployeeV1ApiCreateNewEmployeeRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: EmployeeV1CreateNewEmployeeRecordRequest = {
                newEmployee: requestParameters.newEmployee
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewEmployeeRecord(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Employee API will return employee data currently available in Paylocity Payroll/HR solution.   > ðŸš§ Maintenance Mode >  > _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
         * @summary Get Employee
         * @param {EmployeeV1ApiGetEmployeeDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeData(requestParameters: EmployeeV1ApiGetEmployeeDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeData(requestParameters.companyId, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Employee API sends updates to employee data to Paylocity Payroll/HR solution.   > ðŸš§ Maintenance Mode >  > _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
         * @summary Update employee
         * @param {EmployeeV1ApiUpdateEmployeeDataToPaylocityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeDataToPaylocity(requestParameters: EmployeeV1ApiUpdateEmployeeDataToPaylocityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: EmployeeV1UpdateEmployeeDataToPaylocityRequest = {
                updateEmployee: requestParameters.updateEmployee
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeDataToPaylocity(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeV1Api - factory interface
 * @export
 */
export const EmployeeV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeV1ApiFp(configuration)
    return {
        /**
         * This resource allows for the creation of a new employee record for a specified companyID.  Additional field objects may need to be added for companies that use the New Hire Template in the Paylocity HCM solution when hiring employees and have additional required fields.   > ðŸš§ Maintenance Mode >  > _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
         * @summary Add new employee
         * @param {EmployeeV1ApiCreateNewEmployeeRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEmployeeRecord(requestParameters: EmployeeV1ApiCreateNewEmployeeRecordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createNewEmployeeRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Employee API will return employee data currently available in Paylocity Payroll/HR solution.   > ðŸš§ Maintenance Mode >  > _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
         * @summary Get Employee
         * @param {EmployeeV1ApiGetEmployeeDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeData(requestParameters: EmployeeV1ApiGetEmployeeDataRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeV1> {
            return localVarFp.getEmployeeData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Employee API sends updates to employee data to Paylocity Payroll/HR solution.   > ðŸš§ Maintenance Mode >  > _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
         * @summary Update employee
         * @param {EmployeeV1ApiUpdateEmployeeDataToPaylocityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeDataToPaylocity(requestParameters: EmployeeV1ApiUpdateEmployeeDataToPaylocityRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEmployeeDataToPaylocity(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewEmployeeRecord operation in EmployeeV1Api.
 * @export
 * @interface EmployeeV1ApiCreateNewEmployeeRecordRequest
 */
export type EmployeeV1ApiCreateNewEmployeeRecordRequest = {
    
} & EmployeeV1CreateNewEmployeeRecordRequest

/**
 * Request parameters for getEmployeeData operation in EmployeeV1Api.
 * @export
 * @interface EmployeeV1ApiGetEmployeeDataRequest
 */
export type EmployeeV1ApiGetEmployeeDataRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof EmployeeV1ApiGetEmployeeData
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof EmployeeV1ApiGetEmployeeData
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for updateEmployeeDataToPaylocity operation in EmployeeV1Api.
 * @export
 * @interface EmployeeV1ApiUpdateEmployeeDataToPaylocityRequest
 */
export type EmployeeV1ApiUpdateEmployeeDataToPaylocityRequest = {
    
} & EmployeeV1UpdateEmployeeDataToPaylocityRequest

/**
 * EmployeeV1ApiGenerated - object-oriented interface
 * @export
 * @class EmployeeV1ApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeV1ApiGenerated extends BaseAPI {
    /**
     * This resource allows for the creation of a new employee record for a specified companyID.  Additional field objects may need to be added for companies that use the New Hire Template in the Paylocity HCM solution when hiring employees and have additional required fields.   > ðŸš§ Maintenance Mode >  > _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
     * @summary Add new employee
     * @param {EmployeeV1ApiCreateNewEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeV1ApiGenerated
     */
    public createNewEmployeeRecord(requestParameters: EmployeeV1ApiCreateNewEmployeeRecordRequest, options?: AxiosRequestConfig) {
        return EmployeeV1ApiFp(this.configuration).createNewEmployeeRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Employee API will return employee data currently available in Paylocity Payroll/HR solution.   > ðŸš§ Maintenance Mode >  > _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
     * @summary Get Employee
     * @param {EmployeeV1ApiGetEmployeeDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeV1ApiGenerated
     */
    public getEmployeeData(requestParameters: EmployeeV1ApiGetEmployeeDataRequest, options?: AxiosRequestConfig) {
        return EmployeeV1ApiFp(this.configuration).getEmployeeData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Employee API sends updates to employee data to Paylocity Payroll/HR solution.   > ðŸš§ Maintenance Mode >  > _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
     * @summary Update employee
     * @param {EmployeeV1ApiUpdateEmployeeDataToPaylocityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeV1ApiGenerated
     */
    public updateEmployeeDataToPaylocity(requestParameters: EmployeeV1ApiUpdateEmployeeDataToPaylocityRequest, options?: AxiosRequestConfig) {
        return EmployeeV1ApiFp(this.configuration).updateEmployeeDataToPaylocity(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
