/* tslint:disable */
/* eslint-disable */
/*
WebLink API

For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

The version of the OpenAPI document: v2
Contact: webservices@paylocity.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CompanyCodes } from '../models';
// @ts-ignore
import { ModelError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CompanyCodesApi - axios parameter creator
 * @export
 */
export const CompanyCodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get All Company Codes for the selected company and resource. \\ > ðŸš§ Maintenance Mode >  > _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ >   > The [Company Level Information API](ref:get_apihub-payroll-v1-companies-companyid-jobs) should be used when possible in place of Company Codes resource of this API
         * @summary Get All Company Codes
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} codeResource Type of Company Code. Common values costcenter1, costcenter2, costcenter3, deductions, earnings, taxes, paygrade, positions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByResource: async (companyId: string, codeResource: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAllByResource', 'companyId', companyId)
            // verify required parameter 'codeResource' is not null or undefined
            assertParamExists('getAllByResource', 'codeResource', codeResource)
            const localVarPath = `/v2/companies/{companyId}/codes/{codeResource}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"codeResource"}}`, encodeURIComponent(String(codeResource !== undefined ? codeResource : `-codeResource-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/codes/{codeResource}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyCodesApi - functional programming interface
 * @export
 */
export const CompanyCodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyCodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get All Company Codes for the selected company and resource. \\ > ðŸš§ Maintenance Mode >  > _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ >   > The [Company Level Information API](ref:get_apihub-payroll-v1-companies-companyid-jobs) should be used when possible in place of Company Codes resource of this API
         * @summary Get All Company Codes
         * @param {CompanyCodesApiGetAllByResourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByResource(requestParameters: CompanyCodesApiGetAllByResourceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyCodes>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByResource(requestParameters.companyId, requestParameters.codeResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyCodesApi - factory interface
 * @export
 */
export const CompanyCodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyCodesApiFp(configuration)
    return {
        /**
         * Get All Company Codes for the selected company and resource. \\ > ðŸš§ Maintenance Mode >  > _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ >   > The [Company Level Information API](ref:get_apihub-payroll-v1-companies-companyid-jobs) should be used when possible in place of Company Codes resource of this API
         * @summary Get All Company Codes
         * @param {CompanyCodesApiGetAllByResourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByResource(requestParameters: CompanyCodesApiGetAllByResourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CompanyCodes>> {
            return localVarFp.getAllByResource(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllByResource operation in CompanyCodesApi.
 * @export
 * @interface CompanyCodesApiGetAllByResourceRequest
 */
export type CompanyCodesApiGetAllByResourceRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof CompanyCodesApiGetAllByResource
    */
    readonly companyId: string
    
    /**
    * Type of Company Code. Common values costcenter1, costcenter2, costcenter3, deductions, earnings, taxes, paygrade, positions.
    * @type {string}
    * @memberof CompanyCodesApiGetAllByResource
    */
    readonly codeResource: string
    
}

/**
 * CompanyCodesApiGenerated - object-oriented interface
 * @export
 * @class CompanyCodesApiGenerated
 * @extends {BaseAPI}
 */
export class CompanyCodesApiGenerated extends BaseAPI {
    /**
     * Get All Company Codes for the selected company and resource. \\ > ðŸš§ Maintenance Mode >  > _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ >   > The [Company Level Information API](ref:get_apihub-payroll-v1-companies-companyid-jobs) should be used when possible in place of Company Codes resource of this API
     * @summary Get All Company Codes
     * @param {CompanyCodesApiGetAllByResourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCodesApiGenerated
     */
    public getAllByResource(requestParameters: CompanyCodesApiGetAllByResourceRequest, options?: AxiosRequestConfig) {
        return CompanyCodesApiFp(this.configuration).getAllByResource(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
