/* tslint:disable */
/* eslint-disable */
/*
WebLink API

For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

The version of the OpenAPI document: v2
Contact: webservices@paylocity.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { PayStatementDetails } from '../models';
// @ts-ignore
import { PayStatementSummary } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayStatementsApi - axios parameter creator
 * @export
 */
export const PayStatementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get pay statement details API will return employee pay statement details data currently available in Paylocity Payroll/HR solution for the specified year.
         * @summary Get employee pay statement details data for the specified year.
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {string} year The year for which to retrieve pay statement data
         * @param {number} [pagesize] Number of records per page. Default value is 25.
         * @param {number} [pagenumber] Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber&#x3D;0). Default value is 0.
         * @param {boolean} [includetotalcount] Whether to include the total record count in the header\&#39;s X-Pcty-Total-Count property. Default value is true.
         * @param {string} [codegroup] Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByYear: async (companyId: string, employeeId: string, year: string, pagesize?: number, pagenumber?: number, includetotalcount?: boolean, codegroup?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getDetailsByYear', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getDetailsByYear', 'employeeId', employeeId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getDetailsByYear', 'year', year)
            const localVarPath = `/v2/companies/{companyId}/employees/{employeeId}/paystatement/details/{year}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)
            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (includetotalcount !== undefined) {
                localVarQueryParameter['includetotalcount'] = includetotalcount;
            }

            if (codegroup !== undefined) {
                localVarQueryParameter['codegroup'] = codegroup;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/employees/{employeeId}/paystatement/details/{year}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get pay statement details API will return employee pay statement detail data currently available in Paylocity Payroll/HR solution for the specified year and check date.
         * @summary Get employee pay statement details data for the specified year and check date.
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {string} year The year for which to retrieve pay statement data
         * @param {string} checkDate The check date for which to retrieve pay statement data
         * @param {number} [pagesize] Number of records per page. Default value is 25.
         * @param {number} [pagenumber] Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber&#x3D;0). Default value is 0.
         * @param {boolean} [includetotalcount] Whether to include the total record count in the header\&#39;s X-Pcty-Total-Count property. Default value is true.
         * @param {string} [codegroup] Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByYearAndCheckDate: async (companyId: string, employeeId: string, year: string, checkDate: string, pagesize?: number, pagenumber?: number, includetotalcount?: boolean, codegroup?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getDetailsByYearAndCheckDate', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getDetailsByYearAndCheckDate', 'employeeId', employeeId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getDetailsByYearAndCheckDate', 'year', year)
            // verify required parameter 'checkDate' is not null or undefined
            assertParamExists('getDetailsByYearAndCheckDate', 'checkDate', checkDate)
            const localVarPath = `/v2/companies/{companyId}/employees/{employeeId}/paystatement/details/{year}/{checkDate}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"checkDate"}}`, encodeURIComponent(String(checkDate !== undefined ? checkDate : `-checkDate-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)
            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (includetotalcount !== undefined) {
                localVarQueryParameter['includetotalcount'] = includetotalcount;
            }

            if (codegroup !== undefined) {
                localVarQueryParameter['codegroup'] = codegroup;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/employees/{employeeId}/paystatement/details/{year}/{checkDate}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get pay statement summary API will return employee pay statement summary data currently available in Paylocity Payroll/HR solution for the specified year.
         * @summary Get employee pay statement summary data for the specified year.
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {string} year The year for which to retrieve pay statement data
         * @param {number} [pagesize] Number of records per page. Default value is 25.
         * @param {number} [pagenumber] Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber&#x3D;0). Default value is 0.
         * @param {boolean} [includetotalcount] Whether to include the total record count in the header\&#39;s X-Pcty-Total-Count property. Default value is true.
         * @param {string} [codegroup] Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummaryByYear: async (companyId: string, employeeId: string, year: string, pagesize?: number, pagenumber?: number, includetotalcount?: boolean, codegroup?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSummaryByYear', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getSummaryByYear', 'employeeId', employeeId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getSummaryByYear', 'year', year)
            const localVarPath = `/v2/companies/{companyId}/employees/{employeeId}/paystatement/summary/{year}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)
            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (includetotalcount !== undefined) {
                localVarQueryParameter['includetotalcount'] = includetotalcount;
            }

            if (codegroup !== undefined) {
                localVarQueryParameter['codegroup'] = codegroup;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/employees/{employeeId}/paystatement/summary/{year}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get pay statement summary API will return employee pay statement summary data currently available in Paylocity Payroll/HR solution for the specified year and check date.
         * @summary Get employee pay statement summary data for the specified year and check date.
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {string} year The year for which to retrieve pay statement data
         * @param {string} checkDate The check date for which to retrieve pay statement data
         * @param {number} [pagesize] Number of records per page. Default value is 25.
         * @param {number} [pagenumber] Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber&#x3D;0). Default value is 0.
         * @param {boolean} [includetotalcount] Whether to include the total record count in the header\&#39;s X-Pcty-Total-Count property. Default value is true.
         * @param {string} [codegroup] Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummaryData: async (companyId: string, employeeId: string, year: string, checkDate: string, pagesize?: number, pagenumber?: number, includetotalcount?: boolean, codegroup?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSummaryData', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getSummaryData', 'employeeId', employeeId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getSummaryData', 'year', year)
            // verify required parameter 'checkDate' is not null or undefined
            assertParamExists('getSummaryData', 'checkDate', checkDate)
            const localVarPath = `/v2/companies/{companyId}/employees/{employeeId}/paystatement/summary/{year}/{checkDate}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"checkDate"}}`, encodeURIComponent(String(checkDate !== undefined ? checkDate : `-checkDate-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)
            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (includetotalcount !== undefined) {
                localVarQueryParameter['includetotalcount'] = includetotalcount;
            }

            if (codegroup !== undefined) {
                localVarQueryParameter['codegroup'] = codegroup;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/employees/{employeeId}/paystatement/summary/{year}/{checkDate}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayStatementsApi - functional programming interface
 * @export
 */
export const PayStatementsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayStatementsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get pay statement details API will return employee pay statement details data currently available in Paylocity Payroll/HR solution for the specified year.
         * @summary Get employee pay statement details data for the specified year.
         * @param {PayStatementsApiGetDetailsByYearRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailsByYear(requestParameters: PayStatementsApiGetDetailsByYearRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayStatementDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailsByYear(requestParameters.companyId, requestParameters.employeeId, requestParameters.year, requestParameters.pagesize, requestParameters.pagenumber, requestParameters.includetotalcount, requestParameters.codegroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get pay statement details API will return employee pay statement detail data currently available in Paylocity Payroll/HR solution for the specified year and check date.
         * @summary Get employee pay statement details data for the specified year and check date.
         * @param {PayStatementsApiGetDetailsByYearAndCheckDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailsByYearAndCheckDate(requestParameters: PayStatementsApiGetDetailsByYearAndCheckDateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayStatementDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailsByYearAndCheckDate(requestParameters.companyId, requestParameters.employeeId, requestParameters.year, requestParameters.checkDate, requestParameters.pagesize, requestParameters.pagenumber, requestParameters.includetotalcount, requestParameters.codegroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get pay statement summary API will return employee pay statement summary data currently available in Paylocity Payroll/HR solution for the specified year.
         * @summary Get employee pay statement summary data for the specified year.
         * @param {PayStatementsApiGetSummaryByYearRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSummaryByYear(requestParameters: PayStatementsApiGetSummaryByYearRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayStatementSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSummaryByYear(requestParameters.companyId, requestParameters.employeeId, requestParameters.year, requestParameters.pagesize, requestParameters.pagenumber, requestParameters.includetotalcount, requestParameters.codegroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get pay statement summary API will return employee pay statement summary data currently available in Paylocity Payroll/HR solution for the specified year and check date.
         * @summary Get employee pay statement summary data for the specified year and check date.
         * @param {PayStatementsApiGetSummaryDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSummaryData(requestParameters: PayStatementsApiGetSummaryDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayStatementSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSummaryData(requestParameters.companyId, requestParameters.employeeId, requestParameters.year, requestParameters.checkDate, requestParameters.pagesize, requestParameters.pagenumber, requestParameters.includetotalcount, requestParameters.codegroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayStatementsApi - factory interface
 * @export
 */
export const PayStatementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayStatementsApiFp(configuration)
    return {
        /**
         * Get pay statement details API will return employee pay statement details data currently available in Paylocity Payroll/HR solution for the specified year.
         * @summary Get employee pay statement details data for the specified year.
         * @param {PayStatementsApiGetDetailsByYearRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByYear(requestParameters: PayStatementsApiGetDetailsByYearRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PayStatementDetails>> {
            return localVarFp.getDetailsByYear(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get pay statement details API will return employee pay statement detail data currently available in Paylocity Payroll/HR solution for the specified year and check date.
         * @summary Get employee pay statement details data for the specified year and check date.
         * @param {PayStatementsApiGetDetailsByYearAndCheckDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByYearAndCheckDate(requestParameters: PayStatementsApiGetDetailsByYearAndCheckDateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PayStatementDetails>> {
            return localVarFp.getDetailsByYearAndCheckDate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get pay statement summary API will return employee pay statement summary data currently available in Paylocity Payroll/HR solution for the specified year.
         * @summary Get employee pay statement summary data for the specified year.
         * @param {PayStatementsApiGetSummaryByYearRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummaryByYear(requestParameters: PayStatementsApiGetSummaryByYearRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PayStatementSummary>> {
            return localVarFp.getSummaryByYear(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get pay statement summary API will return employee pay statement summary data currently available in Paylocity Payroll/HR solution for the specified year and check date.
         * @summary Get employee pay statement summary data for the specified year and check date.
         * @param {PayStatementsApiGetSummaryDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummaryData(requestParameters: PayStatementsApiGetSummaryDataRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PayStatementSummary>> {
            return localVarFp.getSummaryData(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDetailsByYear operation in PayStatementsApi.
 * @export
 * @interface PayStatementsApiGetDetailsByYearRequest
 */
export type PayStatementsApiGetDetailsByYearRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof PayStatementsApiGetDetailsByYear
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof PayStatementsApiGetDetailsByYear
    */
    readonly employeeId: string
    
    /**
    * The year for which to retrieve pay statement data
    * @type {string}
    * @memberof PayStatementsApiGetDetailsByYear
    */
    readonly year: string
    
    /**
    * Number of records per page. Default value is 25.
    * @type {number}
    * @memberof PayStatementsApiGetDetailsByYear
    */
    readonly pagesize?: number
    
    /**
    * Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.
    * @type {number}
    * @memberof PayStatementsApiGetDetailsByYear
    */
    readonly pagenumber?: number
    
    /**
    * Whether to include the total record count in the header\'s X-Pcty-Total-Count property. Default value is true.
    * @type {boolean}
    * @memberof PayStatementsApiGetDetailsByYear
    */
    readonly includetotalcount?: boolean
    
    /**
    * Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW.
    * @type {string}
    * @memberof PayStatementsApiGetDetailsByYear
    */
    readonly codegroup?: string
    
}

/**
 * Request parameters for getDetailsByYearAndCheckDate operation in PayStatementsApi.
 * @export
 * @interface PayStatementsApiGetDetailsByYearAndCheckDateRequest
 */
export type PayStatementsApiGetDetailsByYearAndCheckDateRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof PayStatementsApiGetDetailsByYearAndCheckDate
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof PayStatementsApiGetDetailsByYearAndCheckDate
    */
    readonly employeeId: string
    
    /**
    * The year for which to retrieve pay statement data
    * @type {string}
    * @memberof PayStatementsApiGetDetailsByYearAndCheckDate
    */
    readonly year: string
    
    /**
    * The check date for which to retrieve pay statement data
    * @type {string}
    * @memberof PayStatementsApiGetDetailsByYearAndCheckDate
    */
    readonly checkDate: string
    
    /**
    * Number of records per page. Default value is 25.
    * @type {number}
    * @memberof PayStatementsApiGetDetailsByYearAndCheckDate
    */
    readonly pagesize?: number
    
    /**
    * Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.
    * @type {number}
    * @memberof PayStatementsApiGetDetailsByYearAndCheckDate
    */
    readonly pagenumber?: number
    
    /**
    * Whether to include the total record count in the header\'s X-Pcty-Total-Count property. Default value is true.
    * @type {boolean}
    * @memberof PayStatementsApiGetDetailsByYearAndCheckDate
    */
    readonly includetotalcount?: boolean
    
    /**
    * Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW.
    * @type {string}
    * @memberof PayStatementsApiGetDetailsByYearAndCheckDate
    */
    readonly codegroup?: string
    
}

/**
 * Request parameters for getSummaryByYear operation in PayStatementsApi.
 * @export
 * @interface PayStatementsApiGetSummaryByYearRequest
 */
export type PayStatementsApiGetSummaryByYearRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof PayStatementsApiGetSummaryByYear
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof PayStatementsApiGetSummaryByYear
    */
    readonly employeeId: string
    
    /**
    * The year for which to retrieve pay statement data
    * @type {string}
    * @memberof PayStatementsApiGetSummaryByYear
    */
    readonly year: string
    
    /**
    * Number of records per page. Default value is 25.
    * @type {number}
    * @memberof PayStatementsApiGetSummaryByYear
    */
    readonly pagesize?: number
    
    /**
    * Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.
    * @type {number}
    * @memberof PayStatementsApiGetSummaryByYear
    */
    readonly pagenumber?: number
    
    /**
    * Whether to include the total record count in the header\'s X-Pcty-Total-Count property. Default value is true.
    * @type {boolean}
    * @memberof PayStatementsApiGetSummaryByYear
    */
    readonly includetotalcount?: boolean
    
    /**
    * Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW.
    * @type {string}
    * @memberof PayStatementsApiGetSummaryByYear
    */
    readonly codegroup?: string
    
}

/**
 * Request parameters for getSummaryData operation in PayStatementsApi.
 * @export
 * @interface PayStatementsApiGetSummaryDataRequest
 */
export type PayStatementsApiGetSummaryDataRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof PayStatementsApiGetSummaryData
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof PayStatementsApiGetSummaryData
    */
    readonly employeeId: string
    
    /**
    * The year for which to retrieve pay statement data
    * @type {string}
    * @memberof PayStatementsApiGetSummaryData
    */
    readonly year: string
    
    /**
    * The check date for which to retrieve pay statement data
    * @type {string}
    * @memberof PayStatementsApiGetSummaryData
    */
    readonly checkDate: string
    
    /**
    * Number of records per page. Default value is 25.
    * @type {number}
    * @memberof PayStatementsApiGetSummaryData
    */
    readonly pagesize?: number
    
    /**
    * Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.
    * @type {number}
    * @memberof PayStatementsApiGetSummaryData
    */
    readonly pagenumber?: number
    
    /**
    * Whether to include the total record count in the header\'s X-Pcty-Total-Count property. Default value is true.
    * @type {boolean}
    * @memberof PayStatementsApiGetSummaryData
    */
    readonly includetotalcount?: boolean
    
    /**
    * Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW.
    * @type {string}
    * @memberof PayStatementsApiGetSummaryData
    */
    readonly codegroup?: string
    
}

/**
 * PayStatementsApiGenerated - object-oriented interface
 * @export
 * @class PayStatementsApiGenerated
 * @extends {BaseAPI}
 */
export class PayStatementsApiGenerated extends BaseAPI {
    /**
     * Get pay statement details API will return employee pay statement details data currently available in Paylocity Payroll/HR solution for the specified year.
     * @summary Get employee pay statement details data for the specified year.
     * @param {PayStatementsApiGetDetailsByYearRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayStatementsApiGenerated
     */
    public getDetailsByYear(requestParameters: PayStatementsApiGetDetailsByYearRequest, options?: AxiosRequestConfig) {
        return PayStatementsApiFp(this.configuration).getDetailsByYear(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get pay statement details API will return employee pay statement detail data currently available in Paylocity Payroll/HR solution for the specified year and check date.
     * @summary Get employee pay statement details data for the specified year and check date.
     * @param {PayStatementsApiGetDetailsByYearAndCheckDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayStatementsApiGenerated
     */
    public getDetailsByYearAndCheckDate(requestParameters: PayStatementsApiGetDetailsByYearAndCheckDateRequest, options?: AxiosRequestConfig) {
        return PayStatementsApiFp(this.configuration).getDetailsByYearAndCheckDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get pay statement summary API will return employee pay statement summary data currently available in Paylocity Payroll/HR solution for the specified year.
     * @summary Get employee pay statement summary data for the specified year.
     * @param {PayStatementsApiGetSummaryByYearRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayStatementsApiGenerated
     */
    public getSummaryByYear(requestParameters: PayStatementsApiGetSummaryByYearRequest, options?: AxiosRequestConfig) {
        return PayStatementsApiFp(this.configuration).getSummaryByYear(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get pay statement summary API will return employee pay statement summary data currently available in Paylocity Payroll/HR solution for the specified year and check date.
     * @summary Get employee pay statement summary data for the specified year and check date.
     * @param {PayStatementsApiGetSummaryDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayStatementsApiGenerated
     */
    public getSummaryData(requestParameters: PayStatementsApiGetSummaryDataRequest, options?: AxiosRequestConfig) {
        return PayStatementsApiFp(this.configuration).getSummaryData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
