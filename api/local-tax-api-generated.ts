/* tslint:disable */
/* eslint-disable */
/*
WebLink API

For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

The version of the OpenAPI document: v2
Contact: webservices@paylocity.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorsInner } from '../models';
// @ts-ignore
import { LocalTax } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LocalTaxApi - axios parameter creator
 * @export
 */
export const LocalTaxApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add Local Tax sends new local tax information directly to Paylocity Payroll/HR solution.
         * @summary Add Local Tax
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {LocalTax} body localTax Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateLocalTaxes: async (companyId: string, employeeId: string, body: LocalTax, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createOrUpdateLocalTaxes', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createOrUpdateLocalTaxes', 'employeeId', employeeId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createOrUpdateLocalTaxes', 'body', body)
            const localVarPath = `/v1/companies/{companyId}/employees/{employeeId}/localTaxes`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{companyId}/employees/{employeeId}/localTaxes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Local Taxes returns all local tax information for the selected employee.
         * @summary Get All Local Taxes
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTaxesForEmployee: async (companyId: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAllTaxesForEmployee', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getAllTaxesForEmployee', 'employeeId', employeeId)
            const localVarPath = `/v1/companies/{companyId}/employees/{employeeId}/localTaxes`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{companyId}/employees/{employeeId}/localTaxes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Local Tax for Tax Code returns local tax information for the specific tax code for the selected employee.
         * @summary Get Local Tax for Tax Code
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {string} taxCode Tax Code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForTaxCode: async (companyId: string, employeeId: string, taxCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getForTaxCode', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getForTaxCode', 'employeeId', employeeId)
            // verify required parameter 'taxCode' is not null or undefined
            assertParamExists('getForTaxCode', 'taxCode', taxCode)
            const localVarPath = `/v1/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"taxCode"}}`, encodeURIComponent(String(taxCode !== undefined ? taxCode : `-taxCode-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Local Tax for Tax Code deletes the local tax code from Paylocity Payroll/HR solution.
         * @summary Delete Local Tax for Tax Code
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {string} taxCode Tax Code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeForTaxCode: async (companyId: string, employeeId: string, taxCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('removeForTaxCode', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('removeForTaxCode', 'employeeId', employeeId)
            // verify required parameter 'taxCode' is not null or undefined
            assertParamExists('removeForTaxCode', 'taxCode', taxCode)
            const localVarPath = `/v1/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"taxCode"}}`, encodeURIComponent(String(taxCode !== undefined ? taxCode : `-taxCode-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Local Tax sends updated local tax code information for the selected employee.
         * @summary Update Local Tax
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {string} taxCode Tax Code
         * @param {LocalTax} body localTax Model (Note: taxCode can be included in the localTax model but will be ignored)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateForTaxCode: async (companyId: string, employeeId: string, taxCode: string, body: LocalTax, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateForTaxCode', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateForTaxCode', 'employeeId', employeeId)
            // verify required parameter 'taxCode' is not null or undefined
            assertParamExists('updateForTaxCode', 'taxCode', taxCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateForTaxCode', 'body', body)
            const localVarPath = `/v1/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"taxCode"}}`, encodeURIComponent(String(taxCode !== undefined ? taxCode : `-taxCode-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocalTaxApi - functional programming interface
 * @export
 */
export const LocalTaxApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocalTaxApiAxiosParamCreator(configuration)
    return {
        /**
         * Add Local Tax sends new local tax information directly to Paylocity Payroll/HR solution.
         * @summary Add Local Tax
         * @param {LocalTaxApiCreateOrUpdateLocalTaxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrUpdateLocalTaxes(requestParameters: LocalTaxApiCreateOrUpdateLocalTaxesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: LocalTax = {
                exemptions: requestParameters.exemptions,
                exemptions2: requestParameters.exemptions2,
                filingStatus: requestParameters.filingStatus,
                residentPSD: requestParameters.residentPSD,
                taxCode: requestParameters.taxCode,
                workPSD: requestParameters.workPSD
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrUpdateLocalTaxes(requestParameters.companyId, requestParameters.employeeId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get All Local Taxes returns all local tax information for the selected employee.
         * @summary Get All Local Taxes
         * @param {LocalTaxApiGetAllTaxesForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTaxesForEmployee(requestParameters: LocalTaxApiGetAllTaxesForEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LocalTax>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTaxesForEmployee(requestParameters.companyId, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Local Tax for Tax Code returns local tax information for the specific tax code for the selected employee.
         * @summary Get Local Tax for Tax Code
         * @param {LocalTaxApiGetForTaxCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getForTaxCode(requestParameters: LocalTaxApiGetForTaxCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalTax>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getForTaxCode(requestParameters.companyId, requestParameters.employeeId, requestParameters.taxCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Local Tax for Tax Code deletes the local tax code from Paylocity Payroll/HR solution.
         * @summary Delete Local Tax for Tax Code
         * @param {LocalTaxApiRemoveForTaxCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeForTaxCode(requestParameters: LocalTaxApiRemoveForTaxCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeForTaxCode(requestParameters.companyId, requestParameters.employeeId, requestParameters.taxCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Local Tax sends updated local tax code information for the selected employee.
         * @summary Update Local Tax
         * @param {LocalTaxApiUpdateForTaxCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateForTaxCode(requestParameters: LocalTaxApiUpdateForTaxCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: LocalTax = {
                exemptions: requestParameters.requestBody.exemptions,
                exemptions2: requestParameters.requestBody.exemptions2,
                filingStatus: requestParameters.requestBody.filingStatus,
                residentPSD: requestParameters.requestBody.residentPSD,
                taxCode: requestParameters.requestBody.taxCode,
                workPSD: requestParameters.requestBody.workPSD
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateForTaxCode(requestParameters.companyId, requestParameters.employeeId, requestParameters.taxCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocalTaxApi - factory interface
 * @export
 */
export const LocalTaxApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocalTaxApiFp(configuration)
    return {
        /**
         * Add Local Tax sends new local tax information directly to Paylocity Payroll/HR solution.
         * @summary Add Local Tax
         * @param {LocalTaxApiCreateOrUpdateLocalTaxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateLocalTaxes(requestParameters: LocalTaxApiCreateOrUpdateLocalTaxesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createOrUpdateLocalTaxes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Local Taxes returns all local tax information for the selected employee.
         * @summary Get All Local Taxes
         * @param {LocalTaxApiGetAllTaxesForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTaxesForEmployee(requestParameters: LocalTaxApiGetAllTaxesForEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<Array<LocalTax>> {
            return localVarFp.getAllTaxesForEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Local Tax for Tax Code returns local tax information for the specific tax code for the selected employee.
         * @summary Get Local Tax for Tax Code
         * @param {LocalTaxApiGetForTaxCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForTaxCode(requestParameters: LocalTaxApiGetForTaxCodeRequest, options?: AxiosRequestConfig): AxiosPromise<LocalTax> {
            return localVarFp.getForTaxCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Local Tax for Tax Code deletes the local tax code from Paylocity Payroll/HR solution.
         * @summary Delete Local Tax for Tax Code
         * @param {LocalTaxApiRemoveForTaxCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeForTaxCode(requestParameters: LocalTaxApiRemoveForTaxCodeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeForTaxCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Local Tax sends updated local tax code information for the selected employee.
         * @summary Update Local Tax
         * @param {LocalTaxApiUpdateForTaxCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateForTaxCode(requestParameters: LocalTaxApiUpdateForTaxCodeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateForTaxCode(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOrUpdateLocalTaxes operation in LocalTaxApi.
 * @export
 * @interface LocalTaxApiCreateOrUpdateLocalTaxesRequest
 */
export type LocalTaxApiCreateOrUpdateLocalTaxesRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof LocalTaxApiCreateOrUpdateLocalTaxes
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof LocalTaxApiCreateOrUpdateLocalTaxes
    */
    readonly employeeId: string
    
} & LocalTax

/**
 * Request parameters for getAllTaxesForEmployee operation in LocalTaxApi.
 * @export
 * @interface LocalTaxApiGetAllTaxesForEmployeeRequest
 */
export type LocalTaxApiGetAllTaxesForEmployeeRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof LocalTaxApiGetAllTaxesForEmployee
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof LocalTaxApiGetAllTaxesForEmployee
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for getForTaxCode operation in LocalTaxApi.
 * @export
 * @interface LocalTaxApiGetForTaxCodeRequest
 */
export type LocalTaxApiGetForTaxCodeRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof LocalTaxApiGetForTaxCode
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof LocalTaxApiGetForTaxCode
    */
    readonly employeeId: string
    
    /**
    * Tax Code
    * @type {string}
    * @memberof LocalTaxApiGetForTaxCode
    */
    readonly taxCode: string
    
}

/**
 * Request parameters for removeForTaxCode operation in LocalTaxApi.
 * @export
 * @interface LocalTaxApiRemoveForTaxCodeRequest
 */
export type LocalTaxApiRemoveForTaxCodeRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof LocalTaxApiRemoveForTaxCode
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof LocalTaxApiRemoveForTaxCode
    */
    readonly employeeId: string
    
    /**
    * Tax Code
    * @type {string}
    * @memberof LocalTaxApiRemoveForTaxCode
    */
    readonly taxCode: string
    
}

/**
 * Request parameters for updateForTaxCode operation in LocalTaxApi.
 * @export
 * @interface LocalTaxApiUpdateForTaxCodeRequest
 */
export type LocalTaxApiUpdateForTaxCodeRequest = {
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof LocalTaxApiUpdateForTaxCode
    */
    readonly companyId: string
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof LocalTaxApiUpdateForTaxCode
    */
    readonly employeeId: string
    /**
    * Tax Code
    * @type {string}
    * @memberof LocalTaxApiUpdateForTaxCode
    */
    readonly taxCode: string
    /**
    * localTax Model (Note: taxCode can be included in the localTax model but will be ignored)
    * @type {LocalTax}
    * @memberof LocalTaxApiUpdateForTaxCode
    */
    readonly requestBody: LocalTax
}

/**
 * LocalTaxApiGenerated - object-oriented interface
 * @export
 * @class LocalTaxApiGenerated
 * @extends {BaseAPI}
 */
export class LocalTaxApiGenerated extends BaseAPI {
    /**
     * Add Local Tax sends new local tax information directly to Paylocity Payroll/HR solution.
     * @summary Add Local Tax
     * @param {LocalTaxApiCreateOrUpdateLocalTaxesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalTaxApiGenerated
     */
    public createOrUpdateLocalTaxes(requestParameters: LocalTaxApiCreateOrUpdateLocalTaxesRequest, options?: AxiosRequestConfig) {
        return LocalTaxApiFp(this.configuration).createOrUpdateLocalTaxes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Local Taxes returns all local tax information for the selected employee.
     * @summary Get All Local Taxes
     * @param {LocalTaxApiGetAllTaxesForEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalTaxApiGenerated
     */
    public getAllTaxesForEmployee(requestParameters: LocalTaxApiGetAllTaxesForEmployeeRequest, options?: AxiosRequestConfig) {
        return LocalTaxApiFp(this.configuration).getAllTaxesForEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Local Tax for Tax Code returns local tax information for the specific tax code for the selected employee.
     * @summary Get Local Tax for Tax Code
     * @param {LocalTaxApiGetForTaxCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalTaxApiGenerated
     */
    public getForTaxCode(requestParameters: LocalTaxApiGetForTaxCodeRequest, options?: AxiosRequestConfig) {
        return LocalTaxApiFp(this.configuration).getForTaxCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Local Tax for Tax Code deletes the local tax code from Paylocity Payroll/HR solution.
     * @summary Delete Local Tax for Tax Code
     * @param {LocalTaxApiRemoveForTaxCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalTaxApiGenerated
     */
    public removeForTaxCode(requestParameters: LocalTaxApiRemoveForTaxCodeRequest, options?: AxiosRequestConfig) {
        return LocalTaxApiFp(this.configuration).removeForTaxCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Local Tax sends updated local tax code information for the selected employee.
     * @summary Update Local Tax
     * @param {LocalTaxApiUpdateForTaxCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalTaxApiGenerated
     */
    public updateForTaxCode(requestParameters: LocalTaxApiUpdateForTaxCodeRequest, options?: AxiosRequestConfig) {
        return LocalTaxApiFp(this.configuration).updateForTaxCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
