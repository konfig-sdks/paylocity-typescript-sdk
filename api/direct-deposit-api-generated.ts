/* tslint:disable */
/* eslint-disable */
/*
WebLink API

For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

The version of the OpenAPI document: v2
Contact: webservices@paylocity.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DirectDeposit } from '../models';
// @ts-ignore
import { ModelError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DirectDepositApi - axios parameter creator
 * @export
 */
export const DirectDepositApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get All Direct Deposit returns main direct deposit and all additional direct depositsfor the selected employee.
         * @summary Get All Direct Deposit
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDirectDeposits: async (companyId: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAllDirectDeposits', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getAllDirectDeposits', 'employeeId', employeeId)
            const localVarPath = `/v2/companies/{companyId}/employees/{employeeId}/directDeposit`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/employees/{employeeId}/directDeposit',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DirectDepositApi - functional programming interface
 * @export
 */
export const DirectDepositApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DirectDepositApiAxiosParamCreator(configuration)
    return {
        /**
         * Get All Direct Deposit returns main direct deposit and all additional direct depositsfor the selected employee.
         * @summary Get All Direct Deposit
         * @param {DirectDepositApiGetAllDirectDepositsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDirectDeposits(requestParameters: DirectDepositApiGetAllDirectDepositsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DirectDeposit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDirectDeposits(requestParameters.companyId, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DirectDepositApi - factory interface
 * @export
 */
export const DirectDepositApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DirectDepositApiFp(configuration)
    return {
        /**
         * Get All Direct Deposit returns main direct deposit and all additional direct depositsfor the selected employee.
         * @summary Get All Direct Deposit
         * @param {DirectDepositApiGetAllDirectDepositsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDirectDeposits(requestParameters: DirectDepositApiGetAllDirectDepositsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<DirectDeposit>> {
            return localVarFp.getAllDirectDeposits(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllDirectDeposits operation in DirectDepositApi.
 * @export
 * @interface DirectDepositApiGetAllDirectDepositsRequest
 */
export type DirectDepositApiGetAllDirectDepositsRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof DirectDepositApiGetAllDirectDeposits
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof DirectDepositApiGetAllDirectDeposits
    */
    readonly employeeId: string
    
}

/**
 * DirectDepositApiGenerated - object-oriented interface
 * @export
 * @class DirectDepositApiGenerated
 * @extends {BaseAPI}
 */
export class DirectDepositApiGenerated extends BaseAPI {
    /**
     * Get All Direct Deposit returns main direct deposit and all additional direct depositsfor the selected employee.
     * @summary Get All Direct Deposit
     * @param {DirectDepositApiGetAllDirectDepositsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectDepositApiGenerated
     */
    public getAllDirectDeposits(requestParameters: DirectDepositApiGetAllDirectDepositsRequest, options?: AxiosRequestConfig) {
        return DirectDepositApiFp(this.configuration).getAllDirectDeposits(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
