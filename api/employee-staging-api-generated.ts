/* tslint:disable */
/* eslint-disable */
/*
WebLink API

For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

The version of the OpenAPI document: v2
Contact: webservices@paylocity.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { StagedEmployee } from '../models';
// @ts-ignore
import { TrackingNumberResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeStagingApi - axios parameter creator
 * @export
 */
export const EmployeeStagingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add new employee to Web Link will send partially completed or potentially erroneous new hire record to Web Link, where it can be corrected and competed by company administrator or authorized Paylocity Service Bureau employee.
         * @summary Add new employee to Web Link
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {StagedEmployee} json StagedEmployee Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewEmployeeToWebLink: async (companyId: string, json: StagedEmployee, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('addNewEmployeeToWebLink', 'companyId', companyId)
            // verify required parameter 'json' is not null or undefined
            assertParamExists('addNewEmployeeToWebLink', 'json', json)
            const localVarPath = `/v2/weblinkstaging/companies/{companyId}/employees/newemployees`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: json,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/weblinkstaging/companies/{companyId}/employees/newemployees',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(json, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeStagingApi - functional programming interface
 * @export
 */
export const EmployeeStagingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeStagingApiAxiosParamCreator(configuration)
    return {
        /**
         * Add new employee to Web Link will send partially completed or potentially erroneous new hire record to Web Link, where it can be corrected and competed by company administrator or authorized Paylocity Service Bureau employee.
         * @summary Add new employee to Web Link
         * @param {EmployeeStagingApiAddNewEmployeeToWebLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewEmployeeToWebLink(requestParameters: EmployeeStagingApiAddNewEmployeeToWebLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TrackingNumberResponse>>> {
            const json: StagedEmployee = {
                additionalDirectDeposit: requestParameters.additionalDirectDeposit,
                benefitSetup: requestParameters.benefitSetup,
                birthDate: requestParameters.birthDate,
                customBooleanFields: requestParameters.customBooleanFields,
                customDateFields: requestParameters.customDateFields,
                customDropDownFields: requestParameters.customDropDownFields,
                customNumberFields: requestParameters.customNumberFields,
                customTextFields: requestParameters.customTextFields,
                departmentPosition: requestParameters.departmentPosition,
                disabilityDescription: requestParameters.disabilityDescription,
                employeeId: requestParameters.employeeId,
                ethnicity: requestParameters.ethnicity,
                federalTax: requestParameters.federalTax,
                firstName: requestParameters.firstName,
                fitwExemptReason: requestParameters.fitwExemptReason,
                futaExemptReason: requestParameters.futaExemptReason,
                gender: requestParameters.gender,
                homeAddress: requestParameters.homeAddress,
                isEmployee943: requestParameters.isEmployee943,
                isSmoker: requestParameters.isSmoker,
                lastName: requestParameters.lastName,
                localTax: requestParameters.localTax,
                mainDirectDeposit: requestParameters.mainDirectDeposit,
                maritalStatus: requestParameters.maritalStatus,
                medExemptReason: requestParameters.medExemptReason,
                middleName: requestParameters.middleName,
                nonPrimaryStateTax: requestParameters.nonPrimaryStateTax,
                preferredName: requestParameters.preferredName,
                primaryPayRate: requestParameters.primaryPayRate,
                primaryStateTax: requestParameters.primaryStateTax,
                priorLastName: requestParameters.priorLastName,
                salutation: requestParameters.salutation,
                sitwExemptReason: requestParameters.sitwExemptReason,
                ssExemptReason: requestParameters.ssExemptReason,
                ssn: requestParameters.ssn,
                status: requestParameters.status,
                suffix: requestParameters.suffix,
                suiExemptReason: requestParameters.suiExemptReason,
                suiState: requestParameters.suiState,
                taxDistributionCode1099R: requestParameters.taxDistributionCode1099R,
                taxForm: requestParameters.taxForm,
                veteranDescription: requestParameters.veteranDescription,
                webTime: requestParameters.webTime,
                workAddress: requestParameters.workAddress,
                workEligibility: requestParameters.workEligibility
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewEmployeeToWebLink(requestParameters.companyId, json, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeStagingApi - factory interface
 * @export
 */
export const EmployeeStagingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeStagingApiFp(configuration)
    return {
        /**
         * Add new employee to Web Link will send partially completed or potentially erroneous new hire record to Web Link, where it can be corrected and competed by company administrator or authorized Paylocity Service Bureau employee.
         * @summary Add new employee to Web Link
         * @param {EmployeeStagingApiAddNewEmployeeToWebLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewEmployeeToWebLink(requestParameters: EmployeeStagingApiAddNewEmployeeToWebLinkRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TrackingNumberResponse>> {
            return localVarFp.addNewEmployeeToWebLink(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewEmployeeToWebLink operation in EmployeeStagingApi.
 * @export
 * @interface EmployeeStagingApiAddNewEmployeeToWebLinkRequest
 */
export type EmployeeStagingApiAddNewEmployeeToWebLinkRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof EmployeeStagingApiAddNewEmployeeToWebLink
    */
    readonly companyId: string
    
} & StagedEmployee

/**
 * EmployeeStagingApiGenerated - object-oriented interface
 * @export
 * @class EmployeeStagingApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeStagingApiGenerated extends BaseAPI {
    /**
     * Add new employee to Web Link will send partially completed or potentially erroneous new hire record to Web Link, where it can be corrected and competed by company administrator or authorized Paylocity Service Bureau employee.
     * @summary Add new employee to Web Link
     * @param {EmployeeStagingApiAddNewEmployeeToWebLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeStagingApiGenerated
     */
    public addNewEmployeeToWebLink(requestParameters: EmployeeStagingApiAddNewEmployeeToWebLinkRequest, options?: AxiosRequestConfig) {
        return EmployeeStagingApiFp(this.configuration).addNewEmployeeToWebLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
