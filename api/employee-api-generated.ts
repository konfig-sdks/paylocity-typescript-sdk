/* tslint:disable */
/* eslint-disable */
/*
WebLink API

For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

The version of the OpenAPI document: v2
Contact: webservices@paylocity.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Employee } from '../models';
// @ts-ignore
import { EmployeeIdResponse } from '../models';
// @ts-ignore
import { EmployeeInfo } from '../models';
// @ts-ignore
import { ModelError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeApi - axios parameter creator
 * @export
 */
export const EmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * New Employee API sends new employee data directly to Paylocity Payroll/HR solution. Companies who use the New Hire Template in Paylocity Payroll/HR solution may require additional fields when hiring employees. New Employee API Requests will honor these required fields.
         * @summary Add new employee
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {Employee} json Employee Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToPaylocity: async (companyId: string, json: Employee, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('addToPaylocity', 'companyId', companyId)
            // verify required parameter 'json' is not null or undefined
            assertParamExists('addToPaylocity', 'json', json)
            const localVarPath = `/v2/companies/{companyId}/employees`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: json,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/employees',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(json, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Employees API will return employee data currently available in Paylocity Payroll/HR solution. \\ > ðŸš§ Maintenance Mode >  > _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ >   > The [Employee Demographic API](ref:get_corehr-v1-companies-companyid-employees) should be used when possible in place of the Employee resources of this API
         * @summary Get all employees
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {number} [pagesize] Number of records per page. Default value is 25.
         * @param {number} [pagenumber] Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber&#x3D;0). Default value is 0.
         * @param {boolean} [includetotalcount] Whether to include the total record count in the header\&#39;s X-Pcty-Total-Count property. Default value is true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEmployees: async (companyId: string, pagesize?: number, pagenumber?: number, includetotalcount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAllEmployees', 'companyId', companyId)
            const localVarPath = `/v2/companies/{companyId}/employees`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)
            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (includetotalcount !== undefined) {
                localVarQueryParameter['includetotalcount'] = includetotalcount;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/employees',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Employee API will return employee data currently available in Paylocity Payroll/HR solution. \\ > ðŸš§ Maintenance Mode >  > _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ >   > The [Employee Demographic API](ref:get_corehr-v1-companies-companyid-employees-employeeid) should be used when possible in place of the Employee resources of this API
         * @summary Get employee
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeData: async (companyId: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployeeData', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeData', 'employeeId', employeeId)
            const localVarPath = `/v2/companies/{companyId}/employees/{employeeId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/employees/{employeeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Employee API will update existing employee data in WebPay.
         * @summary Update employee
         * @param {string} companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
         * @param {string} employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
         * @param {Employee} json Employee Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeData: async (companyId: string, employeeId: string, json: Employee, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateEmployeeData', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateEmployeeData', 'employeeId', employeeId)
            // verify required parameter 'json' is not null or undefined
            assertParamExists('updateEmployeeData', 'json', json)
            const localVarPath = `/v2/companies/{companyId}/employees/{employeeId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication paylocity_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "paylocity_auth", ["WebLinkAPI"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: json,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{companyId}/employees/{employeeId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(json, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * New Employee API sends new employee data directly to Paylocity Payroll/HR solution. Companies who use the New Hire Template in Paylocity Payroll/HR solution may require additional fields when hiring employees. New Employee API Requests will honor these required fields.
         * @summary Add new employee
         * @param {EmployeeApiAddToPaylocityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToPaylocity(requestParameters: EmployeeApiAddToPaylocityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeIdResponse>>> {
            const json: Employee = {
                additionalDirectDeposit: requestParameters.additionalDirectDeposit,
                additionalRate: requestParameters.additionalRate,
                benefitSetup: requestParameters.benefitSetup,
                birthDate: requestParameters.birthDate,
                companyFEIN: requestParameters.companyFEIN,
                companyName: requestParameters.companyName,
                currency: requestParameters.currency,
                customBooleanFields: requestParameters.customBooleanFields,
                customDateFields: requestParameters.customDateFields,
                customDropDownFields: requestParameters.customDropDownFields,
                customNumberFields: requestParameters.customNumberFields,
                customTextFields: requestParameters.customTextFields,
                departmentPosition: requestParameters.departmentPosition,
                disabilityDescription: requestParameters.disabilityDescription,
                emergencyContacts: requestParameters.emergencyContacts,
                employeeId: requestParameters.employeeId,
                ethnicity: requestParameters.ethnicity,
                federalTax: requestParameters.federalTax,
                firstName: requestParameters.firstName,
                gender: requestParameters.gender,
                homeAddress: requestParameters.homeAddress,
                isHighlyCompensated: requestParameters.isHighlyCompensated,
                isSmoker: requestParameters.isSmoker,
                lastName: requestParameters.lastName,
                localTax: requestParameters.localTax,
                mainDirectDeposit: requestParameters.mainDirectDeposit,
                maritalStatus: requestParameters.maritalStatus,
                middleName: requestParameters.middleName,
                nonPrimaryStateTax: requestParameters.nonPrimaryStateTax,
                ownerPercent: requestParameters.ownerPercent,
                preferredName: requestParameters.preferredName,
                primaryPayRate: requestParameters.primaryPayRate,
                primaryStateTax: requestParameters.primaryStateTax,
                priorLastName: requestParameters.priorLastName,
                salutation: requestParameters.salutation,
                ssn: requestParameters.ssn,
                status: requestParameters.status,
                suffix: requestParameters.suffix,
                taxSetup: requestParameters.taxSetup,
                veteranDescription: requestParameters.veteranDescription,
                webTime: requestParameters.webTime,
                workAddress: requestParameters.workAddress,
                workEligibility: requestParameters.workEligibility
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToPaylocity(requestParameters.companyId, json, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get All Employees API will return employee data currently available in Paylocity Payroll/HR solution. \\ > ðŸš§ Maintenance Mode >  > _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ >   > The [Employee Demographic API](ref:get_corehr-v1-companies-companyid-employees) should be used when possible in place of the Employee resources of this API
         * @summary Get all employees
         * @param {EmployeeApiGetAllEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEmployees(requestParameters: EmployeeApiGetAllEmployeesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEmployees(requestParameters.companyId, requestParameters.pagesize, requestParameters.pagenumber, requestParameters.includetotalcount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Employee API will return employee data currently available in Paylocity Payroll/HR solution. \\ > ðŸš§ Maintenance Mode >  > _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ >   > The [Employee Demographic API](ref:get_corehr-v1-companies-companyid-employees-employeeid) should be used when possible in place of the Employee resources of this API
         * @summary Get employee
         * @param {EmployeeApiGetEmployeeDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeData(requestParameters: EmployeeApiGetEmployeeDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Employee>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeData(requestParameters.companyId, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Employee API will update existing employee data in WebPay.
         * @summary Update employee
         * @param {EmployeeApiUpdateEmployeeDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeData(requestParameters: EmployeeApiUpdateEmployeeDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const json: Employee = {
                additionalDirectDeposit: requestParameters.requestBody.additionalDirectDeposit,
                additionalRate: requestParameters.requestBody.additionalRate,
                benefitSetup: requestParameters.requestBody.benefitSetup,
                birthDate: requestParameters.requestBody.birthDate,
                companyFEIN: requestParameters.requestBody.companyFEIN,
                companyName: requestParameters.requestBody.companyName,
                currency: requestParameters.requestBody.currency,
                customBooleanFields: requestParameters.requestBody.customBooleanFields,
                customDateFields: requestParameters.requestBody.customDateFields,
                customDropDownFields: requestParameters.requestBody.customDropDownFields,
                customNumberFields: requestParameters.requestBody.customNumberFields,
                customTextFields: requestParameters.requestBody.customTextFields,
                departmentPosition: requestParameters.requestBody.departmentPosition,
                disabilityDescription: requestParameters.requestBody.disabilityDescription,
                emergencyContacts: requestParameters.requestBody.emergencyContacts,
                employeeId: requestParameters.requestBody.employeeId,
                ethnicity: requestParameters.requestBody.ethnicity,
                federalTax: requestParameters.requestBody.federalTax,
                firstName: requestParameters.requestBody.firstName,
                gender: requestParameters.requestBody.gender,
                homeAddress: requestParameters.requestBody.homeAddress,
                isHighlyCompensated: requestParameters.requestBody.isHighlyCompensated,
                isSmoker: requestParameters.requestBody.isSmoker,
                lastName: requestParameters.requestBody.lastName,
                localTax: requestParameters.requestBody.localTax,
                mainDirectDeposit: requestParameters.requestBody.mainDirectDeposit,
                maritalStatus: requestParameters.requestBody.maritalStatus,
                middleName: requestParameters.requestBody.middleName,
                nonPrimaryStateTax: requestParameters.requestBody.nonPrimaryStateTax,
                ownerPercent: requestParameters.requestBody.ownerPercent,
                preferredName: requestParameters.requestBody.preferredName,
                primaryPayRate: requestParameters.requestBody.primaryPayRate,
                primaryStateTax: requestParameters.requestBody.primaryStateTax,
                priorLastName: requestParameters.requestBody.priorLastName,
                salutation: requestParameters.requestBody.salutation,
                ssn: requestParameters.requestBody.ssn,
                status: requestParameters.requestBody.status,
                suffix: requestParameters.requestBody.suffix,
                taxSetup: requestParameters.requestBody.taxSetup,
                veteranDescription: requestParameters.requestBody.veteranDescription,
                webTime: requestParameters.requestBody.webTime,
                workAddress: requestParameters.requestBody.workAddress,
                workEligibility: requestParameters.requestBody.workEligibility
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeData(requestParameters.companyId, requestParameters.employeeId, json, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeApiFp(configuration)
    return {
        /**
         * New Employee API sends new employee data directly to Paylocity Payroll/HR solution. Companies who use the New Hire Template in Paylocity Payroll/HR solution may require additional fields when hiring employees. New Employee API Requests will honor these required fields.
         * @summary Add new employee
         * @param {EmployeeApiAddToPaylocityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToPaylocity(requestParameters: EmployeeApiAddToPaylocityRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeIdResponse>> {
            return localVarFp.addToPaylocity(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Employees API will return employee data currently available in Paylocity Payroll/HR solution. \\ > ðŸš§ Maintenance Mode >  > _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ >   > The [Employee Demographic API](ref:get_corehr-v1-companies-companyid-employees) should be used when possible in place of the Employee resources of this API
         * @summary Get all employees
         * @param {EmployeeApiGetAllEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEmployees(requestParameters: EmployeeApiGetAllEmployeesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeInfo>> {
            return localVarFp.getAllEmployees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Employee API will return employee data currently available in Paylocity Payroll/HR solution. \\ > ðŸš§ Maintenance Mode >  > _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ >   > The [Employee Demographic API](ref:get_corehr-v1-companies-companyid-employees-employeeid) should be used when possible in place of the Employee resources of this API
         * @summary Get employee
         * @param {EmployeeApiGetEmployeeDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeData(requestParameters: EmployeeApiGetEmployeeDataRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Employee>> {
            return localVarFp.getEmployeeData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Employee API will update existing employee data in WebPay.
         * @summary Update employee
         * @param {EmployeeApiUpdateEmployeeDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeData(requestParameters: EmployeeApiUpdateEmployeeDataRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEmployeeData(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addToPaylocity operation in EmployeeApi.
 * @export
 * @interface EmployeeApiAddToPaylocityRequest
 */
export type EmployeeApiAddToPaylocityRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof EmployeeApiAddToPaylocity
    */
    readonly companyId: string
    
} & Employee

/**
 * Request parameters for getAllEmployees operation in EmployeeApi.
 * @export
 * @interface EmployeeApiGetAllEmployeesRequest
 */
export type EmployeeApiGetAllEmployeesRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof EmployeeApiGetAllEmployees
    */
    readonly companyId: string
    
    /**
    * Number of records per page. Default value is 25.
    * @type {number}
    * @memberof EmployeeApiGetAllEmployees
    */
    readonly pagesize?: number
    
    /**
    * Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.
    * @type {number}
    * @memberof EmployeeApiGetAllEmployees
    */
    readonly pagenumber?: number
    
    /**
    * Whether to include the total record count in the header\'s X-Pcty-Total-Count property. Default value is true.
    * @type {boolean}
    * @memberof EmployeeApiGetAllEmployees
    */
    readonly includetotalcount?: boolean
    
}

/**
 * Request parameters for getEmployeeData operation in EmployeeApi.
 * @export
 * @interface EmployeeApiGetEmployeeDataRequest
 */
export type EmployeeApiGetEmployeeDataRequest = {
    
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof EmployeeApiGetEmployeeData
    */
    readonly companyId: string
    
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof EmployeeApiGetEmployeeData
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for updateEmployeeData operation in EmployeeApi.
 * @export
 * @interface EmployeeApiUpdateEmployeeDataRequest
 */
export type EmployeeApiUpdateEmployeeDataRequest = {
    /**
    * The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max
    * @type {string}
    * @memberof EmployeeApiUpdateEmployeeData
    */
    readonly companyId: string
    /**
    * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
    * @type {string}
    * @memberof EmployeeApiUpdateEmployeeData
    */
    readonly employeeId: string
    /**
    * Employee Model
    * @type {Employee}
    * @memberof EmployeeApiUpdateEmployeeData
    */
    readonly requestBody: Employee
}

/**
 * EmployeeApiGenerated - object-oriented interface
 * @export
 * @class EmployeeApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeApiGenerated extends BaseAPI {
    /**
     * New Employee API sends new employee data directly to Paylocity Payroll/HR solution. Companies who use the New Hire Template in Paylocity Payroll/HR solution may require additional fields when hiring employees. New Employee API Requests will honor these required fields.
     * @summary Add new employee
     * @param {EmployeeApiAddToPaylocityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public addToPaylocity(requestParameters: EmployeeApiAddToPaylocityRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).addToPaylocity(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Employees API will return employee data currently available in Paylocity Payroll/HR solution. \\ > ðŸš§ Maintenance Mode >  > _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ >   > The [Employee Demographic API](ref:get_corehr-v1-companies-companyid-employees) should be used when possible in place of the Employee resources of this API
     * @summary Get all employees
     * @param {EmployeeApiGetAllEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public getAllEmployees(requestParameters: EmployeeApiGetAllEmployeesRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getAllEmployees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Employee API will return employee data currently available in Paylocity Payroll/HR solution. \\ > ðŸš§ Maintenance Mode >  > _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ >   > The [Employee Demographic API](ref:get_corehr-v1-companies-companyid-employees-employeeid) should be used when possible in place of the Employee resources of this API
     * @summary Get employee
     * @param {EmployeeApiGetEmployeeDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public getEmployeeData(requestParameters: EmployeeApiGetEmployeeDataRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getEmployeeData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Employee API will update existing employee data in WebPay.
     * @summary Update employee
     * @param {EmployeeApiUpdateEmployeeDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public updateEmployeeData(requestParameters: EmployeeApiUpdateEmployeeDataRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).updateEmployeeData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
